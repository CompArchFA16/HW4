$date
	Wed Oct 19 17:19:11 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module hw4testbenchharness $end
$var wire 1 ! Clk $end
$var wire 32 " ReadData1 [31:0] $end
$var wire 32 # ReadData2 [31:0] $end
$var wire 5 $ ReadRegister1 [4:0] $end
$var wire 5 % ReadRegister2 [4:0] $end
$var wire 1 & RegWrite $end
$var wire 32 ' WriteData [31:0] $end
$var wire 5 ( WriteRegister [4:0] $end
$var wire 1 ) dutpassed $end
$var wire 1 * endtest $end
$var reg 1 + begintest $end
$scope module DUT $end
$var wire 1 ! Clk $end
$var wire 32 , ReadData1 [31:0] $end
$var wire 32 - ReadData2 [31:0] $end
$var wire 5 . ReadRegister1 [4:0] $end
$var wire 5 / ReadRegister2 [4:0] $end
$var wire 1 & RegWrite $end
$var wire 32 0 WriteData [31:0] $end
$var wire 5 1 WriteRegister [4:0] $end
$var wire 32 2 decout [31:0] $end
$var wire 32 3 reg0 [31:0] $end
$var wire 32 4 reg1 [31:0] $end
$var wire 32 5 reg10 [31:0] $end
$var wire 32 6 reg11 [31:0] $end
$var wire 32 7 reg12 [31:0] $end
$var wire 32 8 reg13 [31:0] $end
$var wire 32 9 reg14 [31:0] $end
$var wire 32 : reg15 [31:0] $end
$var wire 32 ; reg16 [31:0] $end
$var wire 32 < reg17 [31:0] $end
$var wire 32 = reg18 [31:0] $end
$var wire 32 > reg19 [31:0] $end
$var wire 32 ? reg2 [31:0] $end
$var wire 32 @ reg20 [31:0] $end
$var wire 32 A reg21 [31:0] $end
$var wire 32 B reg22 [31:0] $end
$var wire 32 C reg23 [31:0] $end
$var wire 32 D reg24 [31:0] $end
$var wire 32 E reg25 [31:0] $end
$var wire 32 F reg26 [31:0] $end
$var wire 32 G reg27 [31:0] $end
$var wire 32 H reg28 [31:0] $end
$var wire 32 I reg29 [31:0] $end
$var wire 32 J reg3 [31:0] $end
$var wire 32 K reg30 [31:0] $end
$var wire 32 L reg31 [31:0] $end
$var wire 32 M reg4 [31:0] $end
$var wire 32 N reg5 [31:0] $end
$var wire 32 O reg6 [31:0] $end
$var wire 32 P reg7 [31:0] $end
$var wire 32 Q reg8 [31:0] $end
$var wire 32 R reg9 [31:0] $end
$scope module decoder $end
$var wire 5 S address [4:0] $end
$var wire 1 & enable $end
$var wire 32 T out [31:0] $end
$upscope $end
$scope module zeroreg $end
$var wire 1 ! clk $end
$var wire 32 U d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 V q [31:0] $end
$upscope $end
$scope module onereg $end
$var wire 1 ! clk $end
$var wire 32 W d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 X q [31:0] $end
$upscope $end
$scope module tworeg $end
$var wire 1 ! clk $end
$var wire 32 Y d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 Z q [31:0] $end
$upscope $end
$scope module threereg $end
$var wire 1 ! clk $end
$var wire 32 [ d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 \ q [31:0] $end
$upscope $end
$scope module fourreg $end
$var wire 1 ! clk $end
$var wire 32 ] d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 ^ q [31:0] $end
$upscope $end
$scope module fivereg $end
$var wire 1 ! clk $end
$var wire 32 _ d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 ` q [31:0] $end
$upscope $end
$scope module sixreg $end
$var wire 1 ! clk $end
$var wire 32 a d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 b q [31:0] $end
$upscope $end
$scope module sevenreg $end
$var wire 1 ! clk $end
$var wire 32 c d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 d q [31:0] $end
$upscope $end
$scope module eightreg $end
$var wire 1 ! clk $end
$var wire 32 e d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 f q [31:0] $end
$upscope $end
$scope module ninereg $end
$var wire 1 ! clk $end
$var wire 32 g d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 h q [31:0] $end
$upscope $end
$scope module tenreg $end
$var wire 1 ! clk $end
$var wire 32 i d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 j q [31:0] $end
$upscope $end
$scope module elevenreg $end
$var wire 1 ! clk $end
$var wire 32 k d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 l q [31:0] $end
$upscope $end
$scope module twelvereg $end
$var wire 1 ! clk $end
$var wire 32 m d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 n q [31:0] $end
$upscope $end
$scope module thirteenreg $end
$var wire 1 ! clk $end
$var wire 32 o d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 p q [31:0] $end
$upscope $end
$scope module fourteenreg $end
$var wire 1 ! clk $end
$var wire 32 q d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 r q [31:0] $end
$upscope $end
$scope module fifteenreg $end
$var wire 1 ! clk $end
$var wire 32 s d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 t q [31:0] $end
$upscope $end
$scope module sixteenreg $end
$var wire 1 ! clk $end
$var wire 32 u d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 v q [31:0] $end
$upscope $end
$scope module seventeenreg $end
$var wire 1 ! clk $end
$var wire 32 w d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 x q [31:0] $end
$upscope $end
$scope module eighteenreg $end
$var wire 1 ! clk $end
$var wire 32 y d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 z q [31:0] $end
$upscope $end
$scope module nineteenreg $end
$var wire 1 ! clk $end
$var wire 32 { d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 | q [31:0] $end
$upscope $end
$scope module twentyreg $end
$var wire 1 ! clk $end
$var wire 32 } d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 ~ q [31:0] $end
$upscope $end
$scope module twentyonereg $end
$var wire 1 ! clk $end
$var wire 32 !" d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 "" q [31:0] $end
$upscope $end
$scope module twentytwoereg $end
$var wire 1 ! clk $end
$var wire 32 #" d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 $" q [31:0] $end
$upscope $end
$scope module twentythreereg $end
$var wire 1 ! clk $end
$var wire 32 %" d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 &" q [31:0] $end
$upscope $end
$scope module twentyfourreg $end
$var wire 1 ! clk $end
$var wire 32 '" d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 (" q [31:0] $end
$upscope $end
$scope module twentyfivereg $end
$var wire 1 ! clk $end
$var wire 32 )" d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 *" q [31:0] $end
$upscope $end
$scope module twentysixreg $end
$var wire 1 ! clk $end
$var wire 32 +" d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 ," q [31:0] $end
$upscope $end
$scope module twentysevenreg $end
$var wire 1 ! clk $end
$var wire 32 -" d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 ." q [31:0] $end
$upscope $end
$scope module twentyeightreg $end
$var wire 1 ! clk $end
$var wire 32 /" d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 0" q [31:0] $end
$upscope $end
$scope module twentyninereg $end
$var wire 1 ! clk $end
$var wire 32 1" d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 2" q [31:0] $end
$upscope $end
$scope module thirtyreg $end
$var wire 1 ! clk $end
$var wire 32 3" d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 4" q [31:0] $end
$upscope $end
$scope module thirtyonereg $end
$var wire 1 ! clk $end
$var wire 32 5" d [31:0] $end
$var wire 1 & wrenable $end
$var reg 32 6" q [31:0] $end
$upscope $end
$scope module mux1 $end
$var wire 5 7" address [4:0] $end
$var wire 32 8" input0 [31:0] $end
$var wire 32 9" input1 [31:0] $end
$var wire 32 :" input10 [31:0] $end
$var wire 32 ;" input11 [31:0] $end
$var wire 32 <" input12 [31:0] $end
$var wire 32 =" input13 [31:0] $end
$var wire 32 >" input14 [31:0] $end
$var wire 32 ?" input15 [31:0] $end
$var wire 32 @" input16 [31:0] $end
$var wire 32 A" input17 [31:0] $end
$var wire 32 B" input18 [31:0] $end
$var wire 32 C" input19 [31:0] $end
$var wire 32 D" input2 [31:0] $end
$var wire 32 E" input20 [31:0] $end
$var wire 32 F" input21 [31:0] $end
$var wire 32 G" input22 [31:0] $end
$var wire 32 H" input23 [31:0] $end
$var wire 32 I" input24 [31:0] $end
$var wire 32 J" input25 [31:0] $end
$var wire 32 K" input26 [31:0] $end
$var wire 32 L" input27 [31:0] $end
$var wire 32 M" input28 [31:0] $end
$var wire 32 N" input29 [31:0] $end
$var wire 32 O" input3 [31:0] $end
$var wire 32 P" input30 [31:0] $end
$var wire 32 Q" input31 [31:0] $end
$var wire 32 R" input4 [31:0] $end
$var wire 32 S" input5 [31:0] $end
$var wire 32 T" input6 [31:0] $end
$var wire 32 U" input7 [31:0] $end
$var wire 32 V" input8 [31:0] $end
$var wire 32 W" input9 [31:0] $end
$var wire 32 X" out [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 5 Y" address [4:0] $end
$var wire 32 Z" input0 [31:0] $end
$var wire 32 [" input1 [31:0] $end
$var wire 32 \" input10 [31:0] $end
$var wire 32 ]" input11 [31:0] $end
$var wire 32 ^" input12 [31:0] $end
$var wire 32 _" input13 [31:0] $end
$var wire 32 `" input14 [31:0] $end
$var wire 32 a" input15 [31:0] $end
$var wire 32 b" input16 [31:0] $end
$var wire 32 c" input17 [31:0] $end
$var wire 32 d" input18 [31:0] $end
$var wire 32 e" input19 [31:0] $end
$var wire 32 f" input2 [31:0] $end
$var wire 32 g" input20 [31:0] $end
$var wire 32 h" input21 [31:0] $end
$var wire 32 i" input22 [31:0] $end
$var wire 32 j" input23 [31:0] $end
$var wire 32 k" input24 [31:0] $end
$var wire 32 l" input25 [31:0] $end
$var wire 32 m" input26 [31:0] $end
$var wire 32 n" input27 [31:0] $end
$var wire 32 o" input28 [31:0] $end
$var wire 32 p" input29 [31:0] $end
$var wire 32 q" input3 [31:0] $end
$var wire 32 r" input30 [31:0] $end
$var wire 32 s" input31 [31:0] $end
$var wire 32 t" input4 [31:0] $end
$var wire 32 u" input5 [31:0] $end
$var wire 32 v" input6 [31:0] $end
$var wire 32 w" input7 [31:0] $end
$var wire 32 x" input8 [31:0] $end
$var wire 32 y" input9 [31:0] $end
$var wire 32 z" out [31:0] $end
$upscope $end
$upscope $end
$scope module tester $end
$var wire 32 {" ReadData1 [31:0] $end
$var wire 32 |" ReadData2 [31:0] $end
$var wire 1 }" begintest $end
$var reg 1 ~" Clk $end
$var reg 5 !# ReadRegister1 [4:0] $end
$var reg 5 "# ReadRegister2 [4:0] $end
$var reg 1 ## RegWrite $end
$var reg 32 $# WriteData [31:0] $end
$var reg 5 %# WriteRegister [4:0] $end
$var reg 1 &# dutpassed $end
$var reg 1 '# endtest $end
$upscope $end
$upscope $end
$scope module mux32to1by1 $end
$var wire 5 (# address [4:0] $end
$var wire 32 )# inputs [31:0] $end
$var wire 1 *# out $end
$upscope $end
$scope module register $end
$var wire 1 +# clk $end
$var wire 1 ,# d $end
$var wire 1 -# wrenable $end
$var reg 1 .# q $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x.#
z-#
z,#
z+#
x*#
bz )#
bz (#
x'#
x&#
b0 %#
b0 $#
0##
b0 "#
b0 !#
0~"
0}"
bz |"
bz {"
bz z"
bz y"
bz x"
bz w"
bz v"
bz u"
bz t"
bz s"
bz r"
bz q"
bz p"
bz o"
bz n"
bz m"
bz l"
bz k"
bz j"
bz i"
bz h"
bz g"
bz f"
bz e"
bz d"
bz c"
bz b"
bz a"
bz `"
bz _"
bz ^"
bz ]"
bz \"
bz ["
bz Z"
b0 Y"
bz X"
bz W"
bz V"
bz U"
bz T"
bz S"
bz R"
bz Q"
bz P"
bz O"
bz N"
bz M"
bz L"
bz K"
bz J"
bz I"
bz H"
bz G"
bz F"
bz E"
bz D"
bz C"
bz B"
bz A"
bz @"
bz ?"
bz >"
bz ="
bz <"
bz ;"
bz :"
bz 9"
bz 8"
b0 7"
bx 6"
bz 5"
bx 4"
bz 3"
bx 2"
bz 1"
bx 0"
bz /"
bx ."
bz -"
bx ,"
bz +"
bx *"
bz )"
bx ("
bz '"
bx &"
bz %"
bx $"
bz #"
bx ""
bz !"
bx ~
bz }
bx |
bz {
bx z
bz y
bx x
bz w
bx v
bz u
bx t
bz s
bx r
bz q
bx p
bz o
bx n
bz m
bx l
bz k
bx j
bz i
bx h
bz g
bx f
bz e
bx d
bz c
bx b
bz a
bx `
bz _
bx ^
bz ]
bx \
bz [
bx Z
bz Y
bx X
bz W
bx V
bz U
b0 T
b0 S
bz R
bz Q
bz P
bz O
bz N
bz M
bz L
bz K
bz J
bz I
bz H
bz G
bz F
bz E
bz D
bz C
bz B
bz A
bz @
bz ?
bz >
bz =
bz <
bz ;
bz :
bz 9
bz 8
bz 7
bz 6
bz 5
bz 4
bz 3
b0 2
b0 1
bx 0
b0 /
b0 .
bz -
bz ,
0+
x*
x)
b0 (
bx '
0&
b0 %
b0 $
bz #
bz "
0!
$end
#10
1&#
1)
0'#
0*
1+
1}"
#20
b10 "#
b10 %
b10 /
b10 Y"
b10 !#
b10 $
b10 .
b10 7"
1##
b100 2
b100 T
1&
b101010 $#
b10 %#
b10 (
b10 1
b10 S
#25
b0 V
b0x0x0x0 '
b0x0x0x0 0
bz X
bz Z
bz \
bz ^
bz `
bz b
bz d
bz f
bz h
bz j
bz l
bz n
bz p
bz r
bz t
bz v
bz x
bz z
bz |
bz ~
bz ""
bz $"
bz &"
bz ("
bz *"
bz ,"
bz ."
bz 0"
bz 2"
bz 4"
bz 6"
1~"
1!
#50025
0&#
0)
0~"
0!
#50030
1'#
1*
